What follows is a general outline of what we need to do, as of 2018-01-19.

We need an experiment in which N (configurable) platoon vehicles come up and
___form a platoon___. They should travel along in a straight line for some
period of time until ___something happens___.

___Form a platoon___: 
Each vehicle needs to create an enclave. The enclave needs to generate its own
keypair, which I think can just have ephemeral keys (no need for long-term
storage). It needs to pass the public key out to the simulator and the
simulator needs to exchange all the keys for all the different vehicles.  For
simplicity, we should probably have a single function (setup()?) that passes
all pubkeys and vehicle parameters (platoon index, etc.) in to each enclave at
once.

Once the platoon is formed, we need to have an active contract running. I
propose a "set initial contract" function that is similar to a normal contract
chain (starts at leader, then to v1, then v2, and so on), but is only used
during setup (and implicitly trusted). This means we don't need to go through
the full message passing setup through DSRC or through the simulation. We don't
need to do initial signing.

From that point on, the simulation will have started, and the leader will need
to periodically refresh the contract with a new contract chain, which *does*
have to go through the full simulation, be signed, etc.


___Something happens___: 
We need several different scenarios, or at least support for several different
scenarios. We absolutely need to have an attack scenario in which some vehicle
(possibly the leader? possibly a random vehicle) attempts to slam on their
brakes. We should probably also have scenarios in which the leader decides to
speed up and/or slow down, and the resultant change in the contract should
propagate. To speed up, a normal contract chain suffices. To slow down, the
leader needs to send a reverse-direction contract chain (which does not extend
the contract duration).

