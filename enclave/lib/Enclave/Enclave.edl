enclave {
	include "sgx_tcrypto.h"
	include "sgx_error.h"
	include "../include/status.h"

	trusted {
		// generates a new public and private ec256 key pair, caches the key pair in memory, and persistently stores key pairs on disk
		// the public key is returned for untrusted use, and to identify which private key should be used later on
		public sgx_status_t generate_ec256_key_pair([out] sgx_ec256_public_t* pub);

		// deletes the public/private key pair associated with the input public key, and updates persistent key store on disk
		public sgx_status_t delete_ec256_key_pair([in] sgx_ec256_public_t* pub); 

		// deletes the entire persistent ec256 public/private key store from disk 
		// public sgx_status_t flush_ec256_key_pair_cache();
		public sgx_status_t delete_all_ec256_key_pairs();

		// input:
		//	plaintext	        pointer to buffer of plaintext bytes
		//	plaintext_len       length of plaintext buffer
		//	server_pubkey       pointer to the server's public key (for looking up its corresponding private key)
		//	client_pubkey       pointer to the client's public key
		//	server_random       28 random bytes from the server
		//	server_random_len   should be 28
		//	client_random       28 random bytes from the client
		//	client_random_len   should be 28
		//  is_client           if false, this enclave is on the server | if true, this enclave is on the client -- important so we know which keys to use, the client's or the server's
		// output:
		//	tag	                MAC for the generated ciphertext
		// 	ciphertext          buffer for putting the resulting ciphertext bytes. Must be >= plaintext_len
		public sgx_status_t encrypt_aes_gcm(
			[out,size=16,count=1] sgx_aes_gcm_128bit_tag_t* tag, 
			[out,count=plaintext_len] uint8_t* ciphertext, 
			[in,count=plaintext_len] uint8_t* plaintext, 
			uint32_t plaintext_len, 
			[in] sgx_ec256_public_t* server_pubkey, 
			[in] sgx_ec256_public_t* client_pubkey, 
			[in,count=server_random_len] uint8_t* server_random, 
			uint32_t server_random_len, 
			[in,count=client_random_len] uint8_t* client_random, 
			uint32_t client_random_len, 
			uint8_t is_client );

		// decrypt is just the opposite for in/out -- ciphertext and tag go in, plaintext comes out
		public sgx_status_t decrypt_aes_gcm(
			[in,size=16,count=1] sgx_aes_gcm_128bit_tag_t* tag, 
			[in,count=plaintext_len] uint8_t* ciphertext, 
			[out,count=plaintext_len] uint8_t* plaintext, 
			uint32_t plaintext_len, 
			[in] sgx_ec256_public_t* server_pubkey, 
			[in] sgx_ec256_public_t* client_pubkey, 
			[in,count=server_random_len] uint8_t* server_random, 
			uint32_t server_random_len, 
			[in,count=client_random_len] uint8_t* client_random, 
			uint32_t client_random_len, 
			uint8_t is_client );

		///////////////////////
		// TESTING FUNCTIONS //
		///////////////////////
		public sgx_status_t debug_number_ec256_key_pairs([out] int* num_keys);
	};

	untrusted {
		// keep this around for debugging
		int ocall_prints([in, string] const char* str);
		
		// sealing functions
		jalapeno_status_t ocall_store_sealed_keys([in,count=len] const uint8_t* sealed_data, uint32_t len);
		jalapeno_status_t ocall_load_sealed_keys([out,count=len] uint8_t* sealed_data, uint32_t len);

		// delete persisten sealed key store file from disk
		jalapeno_status_t ocall_delete_sealed_keys_file();
	};
};
