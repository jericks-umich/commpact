enclave {
	include "sgx_tcrypto.h"
	include "sgx_error.h"
	include "stdbool.h"
	include "../App/commpact.h"
	include "../include/commpact_types.h"
	include "../include/ecu_types.h"

	#define COMMPACT_DEBUG

	trusted {

		// 
		public sgx_status_t enclave_status();
		
		//This is the function to generate a ecc256 key pair. 
		//When called, generate a key-pair and return the pub_key
		public sgx_status_t initialEc256KeyPair([out] sgx_ec256_public_t* pub);
		
		//This is the function to set vehicle's position
		//It returns the signature of this position
		public sgx_status_t setPosition(int pos);
	
		//This is the function to set all pubkeys of vehicles in the platoon
		//It takes 2 parameters
		//pubkeys : sgx_ec256_public_t pubkeys*
		//	A pointer to an array of pubkeys to be set, ordered by position in platoon
		//platoon_len : uint8_t 
		//	The length of platoon
		public sgx_status_t 
		setPubKeys([in,count = platoon_len_in]sgx_ec256_public_t* pub_keys_in, 
								uint8_t platoon_len_in);
		
    // mel's function declarations
		public sgx_status_t setInitialSpeedBoundsEnclave(double lower, double upper);
		public sgx_status_t setInitialRecoveryPhaseTimeoutEnclave(double timeout);
		public sgx_status_t checkAllowedSpeedEnclave(double speed, [out] bool* verdict);
		
		// Set ecu's pubkey
		public sgx_status_t setECUPubKey([in] sgx_ec256_public_t* ecu_pub_key_in);
		
		public sgx_status_t newContractChainGetSignatureEnclave([in]contract_chain_t* contract,
							[out]sgx_ec256_signature_t* return_signature, 
							[in,count=num_signatures]sgx_ec256_signature_t *signatures, uint8_t num_signatures);
		
		public sgx_status_t setEnclaveId(uint64_t enclave_id);
		/****************
		*DEBUG FUNCTIONS*
		****************/
		#ifdef COMMPACT_DEBUG
		// Get position of the enclave
		public sgx_status_t getPosition([out] int* pos);

		public sgx_status_t validateSignatures([in]contract_chain_t *contract,
					[in,count= num_signatures]sgx_ec256_signature_t *signatures,uint8_t num_signatures);
		public sgx_status_t checkParameters([in] contract_chain_t *contract);
		public sgx_status_t updateParameters([in] contract_chain_t *contract);
		public sgx_status_t signContract([in]contract_chain_t *contract, 
												[out] sgx_ec256_signature_t* signature);
		#endif
		

	};
	untrusted {
		 // EFFECTS: ocalls ecu.cpp, crafts an ECU message
    int ocallECUMessage(uint64_t enclave_id,[in] sgx_ec256_signature_t *enclave_signature,  [in] ecu_message_t *message,[out] sgx_ec256_signature_t *ecu_signature);
		
		// EFFECTS: sets enclave's public key in ecu
		int ocallECUSetEnclavePubKey(uint64_t enclave_id,[in] sgx_ec256_public_t* enclave_pub_key);

		/****************
		*DEBUG FUNCTIONS*
		****************/

		// This function is used for debugging
		int ocallPrints([in, string] const char* str);
		int ocallPrintD(double dub);
		int ocallPrintI(int i);
		int ocallPrintU(unsigned int i);
		int ocallPrintX(unsigned int i);

   	};
};



	// OLD JALAPENO CODE
	//	// generates a new public and private ec256 key pair, caches the key pair in memory, and persistently stores key pairs on disk
	//	// the public key is returned for untrusted use, and to identify which private key should be used later on
	//	public sgx_status_t generate_ec256_key_pair([out] sgx_ec256_public_t* pub);

	//	// deletes the public/private key pair associated with the input public key, and updates persistent key store on disk
	//	public sgx_status_t delete_ec256_key_pair([in] sgx_ec256_public_t* pub); 

	//	// deletes the entire persistent ec256 public/private key store from disk 
	//	// public sgx_status_t flush_ec256_key_pair_cache();
	//	public sgx_status_t delete_all_ec256_key_pairs();

	//	// input: //	plaintext	        pointer to buffer of plaintext bytes
	//	//	plaintext_len       length of plaintext buffer //	server_pubkey       pointer to the server's public key (for looking up its corresponding private key)
	//	//	client_pubkey       pointer to the client's public key
	//	//	server_random       28 random bytes from the server
	//	//	server_random_len   should be 28
	//	//	client_random       28 random bytes from the client
	//	//	client_random_len   should be 28
	//	//  is_client           if false, this enclave is on the server | if true, this enclave is on the client -- important so we know which keys to use, the client's or the server's
	//	// output:
	//	//	tag	                MAC for the generated ciphertext
	//	// 	ciphertext          buffer for putting the resulting ciphertext bytes. Must be >= plaintext_len
	//	public sgx_status_t encrypt_aes_gcm(
	//		[out,size=16,count=1] sgx_aes_gcm_128bit_tag_t* tag, 
	//		[out,count=plaintext_len] uint8_t* ciphertext, 
	//		[in,count=plaintext_len] uint8_t* plaintext, 
	//		uint32_t plaintext_len, 
	//		[in] sgx_ec256_public_t* server_pubkey, 
	//		[in] sgx_ec256_public_t* client_pubkey, 
	//		[in,count=server_random_len] uint8_t* server_random, 
	//		uint32_t server_random_len, 
	//		[in,count=client_random_len] uint8_t* client_random, 
	//		uint32_t client_random_len, 
	//		uint8_t is_client );

	//	// decrypt is just the opposite for in/out -- ciphertext and tag go in, plaintext comes out
	//	public sgx_status_t decrypt_aes_gcm(
	//		[in,size=16,count=1] sgx_aes_gcm_128bit_tag_t* tag, 
	//		[in,count=plaintext_len] uint8_t* ciphertext, 
	//		[out,count=plaintext_len] uint8_t* plaintext, 
	//		uint32_t plaintext_len, 
	//		[in] sgx_ec256_public_t* server_pubkey, 
	//		[in] sgx_ec256_public_t* client_pubkey, 
	//		[in,count=server_random_len] uint8_t* server_random, 
	//		uint32_t server_random_len, 
	//		[in,count=client_random_len] uint8_t* client_random, 
	//		uint32_t client_random_len, 
	//		uint8_t is_client );

	//	///////////////////////
	//	// TESTING FUNCTIONS //
	//	///////////////////////
	//	public sgx_status_t debug_number_ec256_key_pairs([out] int* num_keys);
	//};

	//untrusted {
	//	// keep this around for debugging
	//	int ocall_prints([in, string] const char* str);
	//	
	//	// sealing functions
	//	commpact_status_t ocall_store_sealed_keys([in,count=len] const uint8_t* sealed_data, uint32_t len);
	//	commpact_status_t ocall_load_sealed_keys([out,count=len] uint8_t* sealed_data, uint32_t len);

	//	// delete persisten sealed key store file from disk
	//	commpact_status_t ocall_delete_sealed_keys_file();
	//};
//};
